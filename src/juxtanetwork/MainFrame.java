package juxtanetwork;

import java.awt.Color;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.ToolTipManager;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;

/**
 *
 * @author Java Project Team
 */
public class MainFrame extends javax.swing.JFrame {

    File rootInputFolder;
    File rootOutFolder = new File("Data");                              // Name of the Audits folder
    final DefaultListModel compList1Model = new DefaultListModel();     // Compare nodes
    final DefaultListModel compList2Model = new DefaultListModel();     // CompareWith Nodes
    final DefaultListModel commListModel = new DefaultListModel();      // Command list for selectiona

    DefaultMutableTreeNode nodeTreeModel = new DefaultMutableTreeNode("Nodes");     // Nodes Tree Root TreeNode
    DefaultMutableTreeNode commsTreeModel = new DefaultMutableTreeNode("Commands"); // Commands Tree Root TreeNode
    DefaultMutableTreeNode nodeTreeModelMSC = new DefaultMutableTreeNode("MSC");    // MSC subtree of nodes Tree
    DefaultMutableTreeNode nodeTreeModelHLR = new DefaultMutableTreeNode("HLR");    // HLR subtree of nodes Tree
    DefaultMutableTreeNode nodeTreeModelPool = new DefaultMutableTreeNode("Pool");  // Pool subtree of nodes Tree

    ImageIcon hlrIcon = new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/hlr16.gif"));
    ImageIcon mscIcon = new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/MSC16.jpg"));
    ImageIcon poolIcon = new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/pool.jpg"));

    Highlight highliter = new Highlight();
    Highlight highliterSearch = new Highlight();
    ArrayList<int[]> diffs1 = new ArrayList<int[]>();
    ArrayList<int[]> diffs2 = new ArrayList<int[]>();
    int currDiff = 0;
    Color diffsColor = Color.ORANGE;
    Color searchColor = Color.YELLOW;
    Color searchFoundColor = Color.CYAN;
    Color diffsCurrColor = Color.MAGENTA;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

        initializations();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        aboutFrame = new javax.swing.JFrame();
        aboutPanel = new javax.swing.JPanel();
        infoNameLBL = new javax.swing.JLabel();
        aboutScrollPane = new javax.swing.JScrollPane();
        aboutTextArea = new javax.swing.JTextArea();
        aboutOkBTN = new javax.swing.JButton();
        settingsDialog = new javax.swing.JDialog();
        discardSettingsBTN = new javax.swing.JButton();
        applySettingsBTN = new javax.swing.JButton();
        settingPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        settingPanel2 = new javax.swing.JPanel();
        colorDifBTN = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        colorSearchBTN = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        colorSearchFoundBTN = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        colorCurrDifBTN = new javax.swing.JButton();
        chooseFromRefDialog = new javax.swing.JDialog();
        chooseRefLBL = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        refChooseList = new javax.swing.JList<>();
        cancelChooseRefBTN = new javax.swing.JButton();
        applyChooseRefBTN = new javax.swing.JButton();
        ColorDialog = new javax.swing.JDialog();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jColorChooser1 = new javax.swing.JColorChooser();
        mainPanel = new javax.swing.JPanel();
        nextBTN = new javax.swing.JButton();
        prevBTN = new javax.swing.JButton();
        mainSplitPane = new javax.swing.JSplitPane();
        nodesScrollPane = new javax.swing.JScrollPane();
        NodesTree = new javax.swing.JTree();
        mainTabbedPane = new javax.swing.JTabbedPane();
        infoPanel = new javax.swing.JScrollPane();
        infoTextArea = new javax.swing.JTextArea();
        comparePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        compList1 = new javax.swing.JList<>();
        clear1BTN = new javax.swing.JButton();
        insertElem1BTN = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        compList2 = new javax.swing.JList<>();
        clear2BTN = new javax.swing.JButton();
        insertElem2BTN = new javax.swing.JButton();
        referenceCompWithBTN = new javax.swing.JButton();
        mainScrollTab3 = new javax.swing.JScrollPane();
        commList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        removeElem1BTN = new javax.swing.JButton();
        removeElem2BTN = new javax.swing.JButton();
        referenceCompBTN = new javax.swing.JButton();
        resultsPanel = new javax.swing.JPanel();
        diffSplitPane = new javax.swing.JSplitPane();
        po1ScrollPane = new javax.swing.JScrollPane();
        po1TextArea = new javax.swing.JTextArea();
        po2ScrollPane = new javax.swing.JScrollPane();
        po2TextArea = new javax.swing.JTextArea();
        compareCombo = new javax.swing.JComboBox<>();
        prevHiliteBTN = new javax.swing.JButton();
        nextHiliteBTN = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        BackFindBTN = new javax.swing.JButton();
        ForFindBTN = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        toolBar = new javax.swing.JToolBar();
        openTLB = new javax.swing.JButton();
        saveTLB = new javax.swing.JButton();
        sidebarBTN = new javax.swing.JButton();
        aboutTLB = new javax.swing.JButton();
        testBTN = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        menuBar = new javax.swing.JMenuBar();
        fileMN = new javax.swing.JMenu();
        OpenMN = new javax.swing.JMenuItem();
        exitMN = new javax.swing.JMenuItem();
        editMN = new javax.swing.JMenu();
        settingsMN = new javax.swing.JMenuItem();
        helpMN = new javax.swing.JMenu();

        fileChooser.setDialogTitle("");
        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        aboutFrame.setTitle("About");
        aboutFrame.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/dual-mobile.png")).getImage());
        aboutFrame.setLocation(new java.awt.Point(800, 500));
        aboutFrame.setMinimumSize(new java.awt.Dimension(470, 250));
        aboutFrame.setResizable(false);

        infoNameLBL.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        infoNameLBL.setForeground(new java.awt.Color(204, 0, 51));
        infoNameLBL.setText("JuxtaNetworks");

        aboutTextArea.setBackground(java.awt.SystemColor.menu);
        aboutTextArea.setColumns(20);
        aboutTextArea.setRows(5);
        aboutTextArea.setText("JuxtaNetworks is an auditing tool for a multiple-CP system,which would \nbe used to observe and highlight configuration differences between blades \nand between members of  MSC in pool, by comparing the relative printouts.\n\nSimilar functionality is currently used in an OSS-RC tool - AXE Audit Tool");
        aboutTextArea.setEnabled(false);
        aboutTextArea.setRequestFocusEnabled(false);
        aboutScrollPane.setViewportView(aboutTextArea);

        aboutOkBTN.setText("OK");
        aboutOkBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutOkBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout aboutPanelLayout = new javax.swing.GroupLayout(aboutPanel);
        aboutPanel.setLayout(aboutPanelLayout);
        aboutPanelLayout.setHorizontalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(aboutScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aboutPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(aboutOkBTN))
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(infoNameLBL)
                .addContainerGap(125, Short.MAX_VALUE))
        );
        aboutPanelLayout.setVerticalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(infoNameLBL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aboutScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(aboutOkBTN)
                .addContainerGap())
        );

        javax.swing.GroupLayout aboutFrameLayout = new javax.swing.GroupLayout(aboutFrame.getContentPane());
        aboutFrame.getContentPane().setLayout(aboutFrameLayout);
        aboutFrameLayout.setHorizontalGroup(
            aboutFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aboutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        aboutFrameLayout.setVerticalGroup(
            aboutFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(aboutPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        settingsDialog.setTitle("Settings");
        settingsDialog.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/dual-mobile.png")).getImage());
        settingsDialog.setLocation(new java.awt.Point(800, 500));
        settingsDialog.setMinimumSize(new java.awt.Dimension(410, 350));

        discardSettingsBTN.setText("Discard");
        discardSettingsBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardSettingsBTNActionPerformed(evt);
            }
        });

        applySettingsBTN.setText("Apply");
        applySettingsBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applySettingsBTNActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Always use the last inserted data of a node to check");

        javax.swing.GroupLayout settingPanel1Layout = new javax.swing.GroupLayout(settingPanel1);
        settingPanel1.setLayout(settingPanel1Layout);
        settingPanel1Layout.setHorizontalGroup(
            settingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingPanel1Layout.createSequentialGroup()
                .addComponent(jCheckBox1)
                .addGap(0, 78, Short.MAX_VALUE))
        );
        settingPanel1Layout.setVerticalGroup(
            settingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        colorDifBTN.setBackground(getDiffsColor());
        colorDifBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorDifBTNActionPerformed(evt);
            }
        });

        jLabel4.setText("Color for Differences:");

        colorSearchBTN.setBackground(getSearchColor());
        colorSearchBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorSearchBTNActionPerformed(evt);
            }
        });

        jLabel5.setText("Color for Search:");

        jLabel6.setText("Color for Search Found:");

        colorSearchFoundBTN.setBackground(getSearchFoundColor());
        colorSearchFoundBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorSearchFoundBTNActionPerformed(evt);
            }
        });

        jLabel7.setText("Color for Current Difference:");

        colorCurrDifBTN.setBackground(getDiffsCurrColor());
        colorCurrDifBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorCurrDifBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout settingPanel2Layout = new javax.swing.GroupLayout(settingPanel2);
        settingPanel2.setLayout(settingPanel2Layout);
        settingPanel2Layout.setHorizontalGroup(
            settingPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(47, 47, 47)
                .addGroup(settingPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(colorCurrDifBTN)
                    .addComponent(colorDifBTN)
                    .addComponent(colorSearchBTN)
                    .addComponent(colorSearchFoundBTN))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        settingPanel2Layout.setVerticalGroup(
            settingPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingPanel2Layout.createSequentialGroup()
                .addGroup(settingPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(colorDifBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel7)
                    .addComponent(colorCurrDifBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel5)
                    .addComponent(colorSearchBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel6)
                    .addComponent(colorSearchFoundBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout settingsDialogLayout = new javax.swing.GroupLayout(settingsDialog.getContentPane());
        settingsDialog.getContentPane().setLayout(settingsDialogLayout);
        settingsDialogLayout.setHorizontalGroup(
            settingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(settingsDialogLayout.createSequentialGroup()
                        .addComponent(applySettingsBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(discardSettingsBTN))
                    .addComponent(settingPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(settingPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        settingsDialogLayout.setVerticalGroup(
            settingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(settingPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(settingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(discardSettingsBTN)
                    .addComponent(applySettingsBTN))
                .addContainerGap())
        );

        chooseRefLBL.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        chooseRefLBL.setText("Choose from Reference");

        refChooseList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(refChooseList);

        cancelChooseRefBTN.setText("Cancel");

        applyChooseRefBTN.setText("Apply");

        javax.swing.GroupLayout chooseFromRefDialogLayout = new javax.swing.GroupLayout(chooseFromRefDialog.getContentPane());
        chooseFromRefDialog.getContentPane().setLayout(chooseFromRefDialogLayout);
        chooseFromRefDialogLayout.setHorizontalGroup(
            chooseFromRefDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseFromRefDialogLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(chooseFromRefDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseRefLBL))
                .addContainerGap(29, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, chooseFromRefDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(applyChooseRefBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelChooseRefBTN)
                .addContainerGap())
        );
        chooseFromRefDialogLayout.setVerticalGroup(
            chooseFromRefDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseFromRefDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chooseRefLBL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chooseFromRefDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelChooseRefBTN)
                    .addComponent(applyChooseRefBTN))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ColorDialog.setSize(new java.awt.Dimension(674, 453));

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Apply");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 634, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 382, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout ColorDialogLayout = new javax.swing.GroupLayout(ColorDialog.getContentPane());
        ColorDialog.getContentPane().setLayout(ColorDialogLayout);
        ColorDialogLayout.setHorizontalGroup(
            ColorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ColorDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ColorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ColorDialogLayout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ColorDialogLayout.setVerticalGroup(
            ColorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ColorDialogLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ColorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jColorChooser1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jColorChooser1MouseClicked(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JuxtaNetwork");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/dual-mobile.png")).getImage());
        setLocation(new java.awt.Point(500, 200));
        setMinimumSize(new java.awt.Dimension(600, 640));
        setPreferredSize(new java.awt.Dimension(850, 650));

        nextBTN.setText("Next");
        nextBTN.setToolTipText("Next tab");
        nextBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBTNActionPerformed(evt);
            }
        });

        prevBTN.setText("Prev");
        prevBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevBTNActionPerformed(evt);
            }
        });

        mainSplitPane.setDividerLocation(150);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        NodesTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        NodesTree.setToggleClickCount(1);
        nodesScrollPane.setViewportView(NodesTree);

        mainSplitPane.setLeftComponent(nodesScrollPane);

        mainTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainTabbedPaneStateChanged(evt);
            }
        });

        infoTextArea.setColumns(20);
        infoTextArea.setRows(5);
        infoPanel.setViewportView(infoTextArea);

        mainTabbedPane.addTab("Information", infoPanel);

        compList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(compList1);

        clear1BTN.setText("X");
        clear1BTN.setToolTipText("Clear Element from Compare");
        clear1BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear1BTNActionPerformed(evt);
            }
        });

        insertElem1BTN.setText(">");
        insertElem1BTN.setToolTipText("Insert Element to Compare");
        insertElem1BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertElem1BTNActionPerformed(evt);
            }
        });

        compList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(compList2);

        clear2BTN.setText("X");
        clear2BTN.setToolTipText("Clear Element from Compare with");
        clear2BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear2BTNActionPerformed(evt);
            }
        });

        insertElem2BTN.setText(">");
        insertElem2BTN.setToolTipText("Insert Element to Compare with");
        insertElem2BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertElem2BTNActionPerformed(evt);
            }
        });

        referenceCompWithBTN.setText("R");
        referenceCompWithBTN.setToolTipText("Load a reference to Compare with");

        commList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "PCORP", "MGNDP", "DBTSP", "MGEPP", "Comm1", "Comm2", "Comm3" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        mainScrollTab3.setViewportView(commList);

        jLabel1.setText("Compare Element");

        jLabel2.setText("With Element");

        jLabel3.setText("Compare Commands");

        removeElem1BTN.setText("<");
        removeElem1BTN.setToolTipText("Remove Element from Compare");
        removeElem1BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeElem1BTNActionPerformed(evt);
            }
        });

        removeElem2BTN.setText("<");
        removeElem2BTN.setToolTipText("Remove Element from Compare with");
        removeElem2BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeElem2BTNActionPerformed(evt);
            }
        });

        referenceCompBTN.setText("R");
        referenceCompBTN.setToolTipText("Load a reference to Compare with");

        javax.swing.GroupLayout comparePanelLayout = new javax.swing.GroupLayout(comparePanel);
        comparePanel.setLayout(comparePanelLayout);
        comparePanelLayout.setHorizontalGroup(
            comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(comparePanelLayout.createSequentialGroup()
                .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(comparePanelLayout.createSequentialGroup()
                            .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(insertElem1BTN)
                                .addComponent(insertElem2BTN))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(removeElem1BTN)
                                .addComponent(removeElem2BTN))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(referenceCompBTN, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(referenceCompWithBTN, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(clear1BTN, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(clear2BTN, javax.swing.GroupLayout.Alignment.TRAILING)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, comparePanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, comparePanelLayout.createSequentialGroup()
                                    .addGap(0, 12, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(20, 20, 20))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)))))
                .addGap(18, 18, 18)
                .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(comparePanelLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 281, Short.MAX_VALUE))
                    .addComponent(mainScrollTab3))
                .addContainerGap())
        );
        comparePanelLayout.setVerticalGroup(
            comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(comparePanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(comparePanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clear1BTN)
                            .addComponent(insertElem1BTN)
                            .addComponent(removeElem1BTN)
                            .addComponent(referenceCompBTN))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clear2BTN)
                            .addComponent(insertElem2BTN)
                            .addComponent(referenceCompWithBTN)
                            .addComponent(removeElem2BTN)))
                    .addGroup(comparePanelLayout.createSequentialGroup()
                        .addComponent(mainScrollTab3, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        mainTabbedPane.addTab("Compare", comparePanel);

        diffSplitPane.setDividerLocation(200);
        diffSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        po1TextArea.setColumns(20);
        po1TextArea.setRows(5);
        po1ScrollPane.setViewportView(po1TextArea);

        diffSplitPane.setTopComponent(po1ScrollPane);

        po2TextArea.setColumns(20);
        po2TextArea.setRows(5);
        po2ScrollPane.setViewportView(po2TextArea);

        diffSplitPane.setRightComponent(po2ScrollPane);

        compareCombo.setToolTipText("Compared Elements");
        compareCombo.setMaximumSize(new java.awt.Dimension(100, 20));
        compareCombo.setPreferredSize(new java.awt.Dimension(100, 20));

        prevHiliteBTN.setText("<");
        prevHiliteBTN.setToolTipText("Previous Difference");
        prevHiliteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevHiliteBTNActionPerformed(evt);
            }
        });

        nextHiliteBTN.setText(">");
        nextHiliteBTN.setToolTipText("Next Difference");
        nextHiliteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextHiliteBTNActionPerformed(evt);
            }
        });

        searchField.setForeground(new java.awt.Color(102, 102, 102));
        searchField.setText("Search..");
        searchField.setToolTipText("Search Field");
        searchField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchFieldMouseClicked(evt);
            }
        });
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        BackFindBTN.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        BackFindBTN.setText("<");
        BackFindBTN.setToolTipText("Previous Difference");
        BackFindBTN.setMargin(new java.awt.Insets(2, 8, 2, 8));
        BackFindBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackFindBTNActionPerformed(evt);
            }
        });

        ForFindBTN.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ForFindBTN.setText(">");
        ForFindBTN.setToolTipText("Previous Difference");
        ForFindBTN.setMargin(new java.awt.Insets(2, 8, 2, 8));
        ForFindBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForFindBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout resultsPanelLayout = new javax.swing.GroupLayout(resultsPanel);
        resultsPanel.setLayout(resultsPanelLayout);
        resultsPanelLayout.setHorizontalGroup(
            resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(diffSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
            .addGroup(resultsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(compareCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(BackFindBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ForFindBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(prevHiliteBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextHiliteBTN)
                .addContainerGap())
        );
        resultsPanelLayout.setVerticalGroup(
            resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultsPanelLayout.createSequentialGroup()
                .addGroup(resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(compareCombo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(prevHiliteBTN)
                        .addComponent(nextHiliteBTN)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BackFindBTN)
                        .addComponent(ForFindBTN)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(diffSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Results", resultsPanel);

        mainSplitPane.setRightComponent(mainTabbedPane);

        jProgressBar1.setPreferredSize(new java.awt.Dimension(146, 23));

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 820, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(prevBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextBTN))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainSplitPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nextBTN)
                        .addComponent(prevBTN))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        toolBar.setFloatable(false);
        toolBar.setRollover(true);

        openTLB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/Open16.png"))); // NOI18N
        openTLB.setToolTipText("Open");
        openTLB.setFocusable(false);
        openTLB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openTLB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openTLB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openTLBActionPerformed(evt);
            }
        });
        toolBar.add(openTLB);

        saveTLB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/Save16.png"))); // NOI18N
        saveTLB.setToolTipText("Save");
        saveTLB.setFocusable(false);
        saveTLB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveTLB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveTLB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTLBActionPerformed(evt);
            }
        });
        toolBar.add(saveTLB);

        sidebarBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/sidebar16.png"))); // NOI18N
        sidebarBTN.setToolTipText("Toggle Sidebar");
        sidebarBTN.setFocusable(false);
        sidebarBTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sidebarBTN.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        sidebarBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sidebarBTNActionPerformed(evt);
            }
        });
        toolBar.add(sidebarBTN);

        aboutTLB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/about16.png"))); // NOI18N
        aboutTLB.setToolTipText("About");
        aboutTLB.setFocusable(false);
        aboutTLB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        aboutTLB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        aboutTLB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutTLBActionPerformed(evt);
            }
        });
        toolBar.add(aboutTLB);

        testBTN.setText("AnalysisBTN");
        testBTN.setFocusable(false);
        testBTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        testBTN.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        testBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testBTNActionPerformed(evt);
            }
        });
        toolBar.add(testBTN);
        toolBar.add(jSeparator1);
        toolBar.add(jSeparator2);

        fileMN.setText("File");

        OpenMN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/Open16.png"))); // NOI18N
        OpenMN.setText("Open");
        OpenMN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMNActionPerformed(evt);
            }
        });
        fileMN.add(OpenMN);

        exitMN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/exit16.png"))); // NOI18N
        exitMN.setText("exit");
        exitMN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMNActionPerformed(evt);
            }
        });
        fileMN.add(exitMN);

        menuBar.add(fileMN);

        editMN.setText("Edit");

        settingsMN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/settings16.png"))); // NOI18N
        settingsMN.setText("Settings");
        settingsMN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMNActionPerformed(evt);
            }
        });
        editMN.add(settingsMN);

        menuBar.add(editMN);

        helpMN.setText("Help");
        menuBar.add(helpMN);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Initializations method
     */
    private void initializations() {
        compList1.setModel(compList1Model);             // Set model for Compare nodes
        compList2.setModel(compList2Model);             // Set model for Compare With nodes
        commList.setModel(commListModel);
        createNodesTree();                              // Create the Nodes Tree Model
        createCommTree();                               // Create the Commands Tree Model
        NodesTree.setRootVisible(false);                // Do not diaplsy the Name of the root of the tree
        NodesTree.setCellRenderer(new MyRenderer());    // Assign icons and tooltips per type of node in NodesTree
        ToolTipManager.sharedInstance().registerComponent(NodesTree); // Tooltips on Nodes Tree enabled

        managePrevNextBTN();
        createCommsList();
    }

    /**
     * Method createNodesTree creates the nodeTree categories: MSC, HLR, Pool
     * and calls updateNodesTree to put the node leafs on the tree
     */
    private void createNodesTree() {
        nodeTreeModel.add(nodeTreeModelMSC);
        nodeTreeModel.add(nodeTreeModelHLR);
        nodeTreeModel.add(nodeTreeModelPool);
        updateNodesTree();
    }

    private void createCommsList() {
        commListModel.addElement("PCORP");
        commListModel.addElement("MGNDP");
        commListModel.addElement("DBTSP");
        commListModel.addElement("MGEPP");
        commListModel.addElement("Comm1");
        commListModel.addElement("Comm2");
        commListModel.addElement("Comm3");
    }

    /**
     * Method updateNodesTree inserts a new node to the tree under the correct
     * category. If the node already exists in the tree, it is not added.
     */
    private void updateNodesTree() {
        DefaultMutableTreeNode[] nodesTreeModel = new DefaultMutableTreeNode[20];
        if (rootOutFolder.exists()) {
            int currIndex = 0;
            for (File node : rootOutFolder.listFiles()) {
                if (node.isDirectory()) {
                    nodesTreeModel[currIndex] = new DefaultMutableTreeNode(node.getName());
                    if (node.getName().startsWith("MSC") && isNotIncluded(nodeTreeModel, node.getName())) {
                        nodeTreeModelMSC.add(nodesTreeModel[currIndex]);
                    } else if (node.getName().startsWith("HLR") && isNotIncluded(nodeTreeModel, node.getName())) {
                        nodeTreeModelHLR.add(nodesTreeModel[currIndex]);
                    }
                    currIndex++;
                }
            }
        }
        NodesTree.updateUI();
    }

    /**
     * Method isNotIncluded checks if a specified treeModel name already exists
     * in the tree provided in the parameter.
     *
     * @param treeModel the Tree model to be checked
     * @param name the node checked
     * @return true if the node name is not included in the tree, i.e. will be a
     * new node on the tree
     */
    private boolean isNotIncluded(DefaultMutableTreeNode treeModel, String name) {
        boolean included = true;

        Enumeration<DefaultMutableTreeNode> e = treeModel.depthFirstEnumeration();
        while (e.hasMoreElements()) {
            DefaultMutableTreeNode nodeCheck = e.nextElement();
            if (name.equals(nodeCheck.toString())) {
                included = false;
            }
        }

        return included;
    }

    /**
     * Inner class MyRenderer is used to render specific icon for the different
     * types of nodes in the Nodes Tree and also specific Tooltips. The
     * categories are MSC node, HLR node, other
     */
    class MyRenderer extends DefaultTreeCellRenderer {

        Icon nodeIcon;

        public MyRenderer(Icon icon) {
            nodeIcon = icon;
        }

        public MyRenderer() {
        }

        @Override
        public Component getTreeCellRendererComponent(
                javax.swing.JTree tree,
                Object value,
                boolean sel,
                boolean expanded,
                boolean leaf,
                int row,
                boolean hasFocus) {

            super.getTreeCellRendererComponent(
                    tree, value, sel,
                    expanded, leaf, row,
                    hasFocus);
            if (isHLR(value)) {  // removed from if: leaf && 
                setIcon(hlrIcon);
                setToolTipText("HLR Node");
            } else if (isMSC(value)) {
                setIcon(mscIcon);
                setToolTipText("MSC Node");
            } else {
                setIcon(poolIcon);
                setToolTipText("Pool (MSC group)");
            }

            return this;
        }

        protected boolean isHLR(Object value) {
            String nodeName = value.toString();

            if (nodeName.startsWith("HLR")) {
                return true;
            }

            return false;
        }

        protected boolean isMSC(Object value) {
            String nodeName = value.toString();

            if (nodeName.startsWith("MSC")) {
                return true;
            }

            return false;
        }
    }

    /**
     * Method createCommTree creates the command tree. This method inserts in
     * the tree the selected from the user commands for the comparison of the
     * nodes. The commands are grouped on two categories, based on whether the
     * command should validate to identical printout or not
     */
    private void createCommTree() {
        DefaultMutableTreeNode[] commsTreeModelNode = new DefaultMutableTreeNode[20];
        int countNodesSelected = 0;
        for (int i = 0; i < compList2Model.size(); i++) {
            commsTreeModelNode[i] = new DefaultMutableTreeNode(compList2Model.getElementAt(i).toString());
            commsTreeModel.add(commsTreeModelNode[i]);
            countNodesSelected++;
        }
        int[] comms = commList.getSelectedIndices();
        for (int i = 0; i < comms.length; i++) {
            for (int j = 0; j < countNodesSelected; j++) {
                DefaultMutableTreeNode commandTreeModelComm = new DefaultMutableTreeNode(commListModel.getElementAt(comms[i]).toString());
                commsTreeModelNode[j].add(commandTreeModelComm);
            }
        }
    }

    /**
     * Method getPrintouts opens a file chooser to select the data input folder.
     * Then calls createStructure to create the Data structure and copies input
     * files
     */
    private void getPrintouts() {

        fileChooser.setDialogTitle("Open Printouts Folder");
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(1);

        fileChooser.showOpenDialog(this);
        try {
            rootInputFolder = fileChooser.getSelectedFile();
            createStructure();
        } catch (Exception e) {
            if (rootInputFolder.getName() == "") {
                System.out.println("No file selected!");
            }
        }
        updateNodesTree();
        expandTreeAll();
    }

    /**
     * Method createStructure creates in Data a timestamp folder and copies all
     * files and directories of input folder to that timestamp directory
     *
     * @throws IOException
     */
    private void createStructure() throws IOException {
        if (!rootOutFolder.exists()) {
            rootOutFolder.mkdir();
        }

        String path = rootOutFolder.getCanonicalPath();    // path in Data folder
        CopyUtil.copyDirectoryContent(new File(rootInputFolder.getCanonicalPath()), new File(path));
    }

    /**
     * Method expandTreeAll expands all the nodes of the tree
     */
    public void expandTreeAll() {
        for (int i = 0; i < NodesTree.getRowCount(); i++) {
            NodesTree.expandRow(i);
        }
    }

    /**
     * Method managePrevNextBTN will manage the Next and Prev buttons of the
     * tabs. When on last tab, NextBTN will not be enabled. When on first tab,
     * prevBTN will not be enabled. In all other cases both buttons are enabled
     */
    private void managePrevNextBTN() {
        int current = mainTabbedPane.getSelectedIndex();

        switch (current) {
            case 2:
                nextBTN.setEnabled(false);
                prevBTN.setEnabled(true);
                NodesTree.setModel(new javax.swing.tree.DefaultTreeModel(commsTreeModel));
                expandTreeAll();
                break;
            case 0:
                nextBTN.setEnabled(true);
                prevBTN.setEnabled(false);
                NodesTree.setModel(new javax.swing.tree.DefaultTreeModel(nodeTreeModel));
                expandTreeAll();
                break;
            default:
                nextBTN.setEnabled(true);
                prevBTN.setEnabled(true);
                NodesTree.setModel(new javax.swing.tree.DefaultTreeModel(nodeTreeModel));
                expandTreeAll();
                break;
        }
    }

    /**
     * Insert an element node from Nodes Tree to model of parameter if not
     * already there
     *
     * @param model
     */
    public void insertElem(DefaultListModel model) {
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) NodesTree
                .getLastSelectedPathComponent();
        String selectedNodeName = selectedNode.toString();
        if (selectedNode.isLeaf()) {
            if (!model.contains(selectedNodeName)) {
                model.addElement(selectedNodeName);
            }
        }
    }

    private void OpenMNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMNActionPerformed
        getPrintouts();
    }//GEN-LAST:event_OpenMNActionPerformed

    private void exitMNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMNActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMNActionPerformed

    private void settingsMNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsMNActionPerformed
        settingsDialog.setVisible(true);
    }//GEN-LAST:event_settingsMNActionPerformed

    private void aboutOkBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutOkBTNActionPerformed
        aboutFrame.setVisible(false);
    }//GEN-LAST:event_aboutOkBTNActionPerformed

    private void discardSettingsBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardSettingsBTNActionPerformed
        settingsDialog.setVisible(false);
    }//GEN-LAST:event_discardSettingsBTNActionPerformed

    private void applySettingsBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applySettingsBTNActionPerformed
        settingsDialog.setVisible(false);
    }//GEN-LAST:event_applySettingsBTNActionPerformed

    private void mainTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mainTabbedPaneStateChanged
        managePrevNextBTN();
    }//GEN-LAST:event_mainTabbedPaneStateChanged

    private void removeElem2BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeElem2BTNActionPerformed
        compList2Model.removeAllElements();
    }//GEN-LAST:event_removeElem2BTNActionPerformed

    private void removeElem1BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeElem1BTNActionPerformed
        compList1Model.removeAllElements();
    }//GEN-LAST:event_removeElem1BTNActionPerformed

    private void insertElem2BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertElem2BTNActionPerformed
        insertElem(compList2Model);
    }//GEN-LAST:event_insertElem2BTNActionPerformed

    private void clear2BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear2BTNActionPerformed
        compList2Model.clear();
    }//GEN-LAST:event_clear2BTNActionPerformed

    private void insertElem1BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertElem1BTNActionPerformed
        insertElem(compList1Model);
    }//GEN-LAST:event_insertElem1BTNActionPerformed

    private void clear1BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear1BTNActionPerformed
        compList1Model.clear();
    }//GEN-LAST:event_clear1BTNActionPerformed

    private void prevBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevBTNActionPerformed
        int current = mainTabbedPane.getSelectedIndex();
        if (current > 0) {
            mainTabbedPane.setSelectedIndex(current - 1);
        }
        managePrevNextBTN();
    }//GEN-LAST:event_prevBTNActionPerformed

    private void nextBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBTNActionPerformed
        int current = mainTabbedPane.getSelectedIndex();
        if (current < 2) {
            mainTabbedPane.setSelectedIndex(current + 1);
        }
        managePrevNextBTN();
    }//GEN-LAST:event_nextBTNActionPerformed

    private void aboutTLBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutTLBActionPerformed
        aboutFrame.setVisible(true);
    }//GEN-LAST:event_aboutTLBActionPerformed

    private void saveTLBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTLBActionPerformed

    }//GEN-LAST:event_saveTLBActionPerformed

    private void openTLBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openTLBActionPerformed
        getPrintouts();
    }//GEN-LAST:event_openTLBActionPerformed

    private void sidebarBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sidebarBTNActionPerformed
        if (mainSplitPane.getDividerLocation() > 1) {
            mainSplitPane.setDividerLocation(0);
            mainSplitPane.setDividerSize(3);
        } else {
            mainSplitPane.setDividerLocation(150);
            mainSplitPane.setDividerSize(5);
        }
    }//GEN-LAST:event_sidebarBTNActionPerformed

    private void testBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testBTNActionPerformed
        int[] test = commList.getSelectedIndices();
        for (int i = 0; i < test.length; i++) {
            System.out.println(test[i] + " " + commListModel.getElementAt(test[i]).toString());
        }
        for (int i = 0; i < compList1Model.size(); i++) {
            compareCombo.addItem(compList1Model.getElementAt(i).toString());
        }
        createCommTree();

        po1TextArea.setText("<PCORP:BLOCK=ALL;\n"
                + "PROGRAM CORRECTIONS\n"
                + " \n"
                + "BLOCK    SUID                               CA     CAF    ILEN\n"
                + "GIPADA   8PXE/CAAW 107 0050/MQ5EG R1A05     380    0      32\n"
                + " \n"
                + "CI               S  TYPE  POSITION         SIZE\n"
                + "SNAEM0119        C  CODE  H'047E           38\n"
                + "SNAEM0119        C  CODE  H'057E           20\n"
                + "SNAEM0119        C  CODE  H'0988           22\n"
                + "SNAEM0119        C  CODE  H'1848           30\n"
                + "SNAEM0119        C  CODE  H'1A6E           22\n"
                + "SWAEM0123        C  CODE  H'1058           60\n"
                + "SWAEM0123        C  CODE  H'0C66           60\n"
                + "SWAEM0123        C  CODE  H'1C86           28\n"
                + "SWAEM0121        C  CODE  H'0304           20\n"
                + "SWAEM0121        C  CODE  H'0265           24\n"
                + "SWAEM0121        C  CODE  H'0158           34\n"
                + "SWAEM0121        C  CODE  H'01B2           22\n\n"
                + "BLOCK    SUID                               CA     CAF    ILEN\n"
                + "DQENUMC  7PXC/CAAZA 107 4993/MQ5EG R1A04    40     0      16\n"
                + " \n"
                + "CI               S  TYPE  POSITION         SIZE\n"
                + "RNAFZ0436        C  CODE  H'0E8A           20\n"
                + "RNAFZ0436        C  CODE  H'0F4B           20\n"
                + " ");

        po2TextArea.setText("<PCORP:BLOCK=ALL;\n"
                + "PROGRAM CORRECTIONS\n"
                + " \n"
                + "BLOCK    SUID                               CA     CAF    ILEN\n"
                + "GIPADA   8PXE/CAAW 107 0050/MQ5EG R1A05     380    0      32\n"
                + " \n"
                + "CI               S  TYPE  POSITION         SIZE\n"
                + "SNAEM0119        C  CODE  H'044E           38\n"
                + "SNAEM0119        C  CODE  H'057E           20\n"
                + "SNAEM0119        C  CODE  H'0988           22\n"
                + "SNAEM0119        C  CODE  H'1848           30\n"
                + "SNAEM0119        C  CODE  H'1A6E           22\n"
                + "SWAEM0121        C  CODE  H'0304           20\n"
                + "SWAEM0121        C  CODE  H'0265           24\n"
                + "SWAEM0121        C  CODE  H'0193           34\n"
                + "S01EM0121        C  CODE  H'01B2           22\n\n"
                + "BLOCK    SUID                               CA     CAF    ILEN\n"
                + "DQENUMC  7PXC/CAAZA 107 4993/MQ5EG R1A04    40     0      16\n"
                + " \n"
                + "CI               S  TYPE  POSITION         SIZE\n"
                + "RNAFZ0436        C  CODE  H'0E8A           20\n"
                + "RNAFZ0436        C  CODE  H'0F4B           20\n"
                + "RNAFZ0436        C  CODE  H'0F4B           20\n"
                + "RNAFZ0999        C  CODE  H'0F59           45\n"
                + "RNAFZ0999        C  CODE  H'1234           48\n"
                + " ");

        LinkedList<diff_match_patch.Diff> diffs = new LinkedList<diff_match_patch.Diff>();
        diff_match_patch dmp = new diff_match_patch();
        dmp.Diff_Timeout = 0;
        diffs = dmp.diff_main(po1TextArea.getText(), po2TextArea.getText());
        dmp.diff_cleanupSemantic(diffs);
        diffs1 = diff_Fortext(diffs);
        diffs = dmp.diff_main(po2TextArea.getText(), po1TextArea.getText());
        dmp.diff_cleanupSemantic(diffs);
        diffs2 = diff_Fortext(diffs);
        cleanUpDiffs();

        highliter.highlightremove(po1TextArea);
        highliter.highlightremove(po2TextArea);
        for (int i = diffs1.size() - 1; i >= 0; i--) {
            highlightDiffs(diffs1.get(i)[0], diffs1.get(i)[1], diffs2.get(i)[0], diffs2.get(i)[1], diffsColor);
        }
    }//GEN-LAST:event_testBTNActionPerformed

    /**
     * If for a specific index difference both diff1 and diff2 lists have start
     * point equal to end point then this difference should be deleted from both
     * diff1 and diff2 lists. These are cases when some characters are different
     * between two texts and the differences is a DELETE(start,end) and
     * INSERT(end,end) for both texts
     */
    private void cleanUpDiffs() {
        for (int i = diffs1.size() - 1; i >= 0; i--) {
            if ((diffs1.get(i)[0] == diffs1.get(i)[1]) && (diffs2.get(i)[0] == diffs2.get(i)[1])) {
                diffs1.remove(i);
                diffs2.remove(i);
            }
        }
    }

    /**
     * Method diff_Fortext will calculate the start and end point of each
     * difference given a List of diffs. A internal StringBuilder is used. For
     * every item in the input diffs list: If the operation is not Equal then a
     * difference starts and start point is saved. Then if the operation is not
     * Insert the difference corresponds to some characters on the present text,
     * so the characters are appended to the StringBuilder. The absolute end
     * point of the difference in the entire text can then be found if we check
     * (for not Equal operation only, since that is the if we kept the start
     * point) the final size of the text.
     *
     * @param diffs linked list of differences that includes the operation and
     * text of each difference
     * @return and ArrayList of absolute [start,end] pair for each difference
     */
    private static ArrayList<int[]> diff_Fortext(List<diff_match_patch.Diff> diffs) {
        ArrayList<int[]> diffsList = new ArrayList<int[]>();
        StringBuilder text = new StringBuilder();
        for (diff_match_patch.Diff aDiff : diffs) {
            int[] diffIndexes = {0, 0};
            if (aDiff.operation != diff_match_patch.Operation.EQUAL) {
                diffIndexes[0] = text.length();
            }
            if (aDiff.operation != diff_match_patch.Operation.INSERT) {
                text.append(aDiff.text);
            }
            if (aDiff.operation != diff_match_patch.Operation.EQUAL) {
                diffIndexes[1] = text.length();
                diffsList.add(diffIndexes);
            }
        }
        return diffsList;
    }

    /**
     * Method highlightDiffs will order the highlight function for both PrintOut
     * text areas given the start/end points and the desired color
     *
     * @param index11 start index of difference for text area 1
     * @param index12 end index of difference for text area 1
     * @param index21 start index of difference for text area 2
     * @param index22 end index of difference for text area 2
     * @param color desired color
     */
    private void highlightDiffs(int index11, int index12, int index21, int index22, Color color) {
        highliter.highlight(po1TextArea, index11, index12, color);
        highliter.highlight(po2TextArea, index21, index22, color);
    }

    private Color getDiffsColor() {
        return diffsColor;
    }

    private Color getDiffsCurrColor() {
        return diffsCurrColor;
    }

    private Color getSearchColor() {
        return searchColor;
    }

    private Color getSearchFoundColor() {
        return searchFoundColor;
    }

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        highliterSearch.highlightremove(po1TextArea);
        highliterSearch.highlightText1(po1TextArea, searchField.getText(), searchColor, searchFoundColor);
        highliterSearch.highlightremove(po2TextArea);
        highliterSearch.highlightText2(po2TextArea, searchField.getText(), searchColor, searchFoundColor);
    }//GEN-LAST:event_searchFieldActionPerformed

    private void ForFindBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForFindBTNActionPerformed
        highliterSearch.highlightremove(po1TextArea);
        highliterSearch.highlightremove(po2TextArea);
        highliterSearch.highlightText1(po1TextArea, searchField.getText(), searchColor, searchFoundColor);
        highliterSearch.highlightText2(po2TextArea, searchField.getText(), searchColor, searchFoundColor);
    }//GEN-LAST:event_ForFindBTNActionPerformed

    private void BackFindBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackFindBTNActionPerformed
        highliterSearch.highlightremove(po1TextArea);
        highliterSearch.highlightremove(po2TextArea);
        highliterSearch.backhighlightText1(po1TextArea, searchField.getText(), searchColor, searchFoundColor);
        highliterSearch.backhighlightText2(po2TextArea, searchField.getText(), searchColor, searchFoundColor);
    }//GEN-LAST:event_BackFindBTNActionPerformed

    private void searchFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchFieldMouseClicked
        searchField.setText("");
    }//GEN-LAST:event_searchFieldMouseClicked

    /**
     * Moves the current Highlight (different color) to the next difference if
     * forBack is true or to the previous difference if forBack is false. It
     * removes all highlights and repaints them for current difference will have
     * a different color
     *
     * @param forBack boolean for forward or backward move
     */
    private void moveHighlight(boolean forBack) {
        if (forBack) {
            if (currDiff < diffs1.size() - 1) {
                currDiff++;
            }
        } else {
            if (currDiff > 0) {
                currDiff--;
            }
        }
        highliter.highlightremove(po1TextArea);
        highliter.highlightremove(po2TextArea);
        for (int i = 0; i < diffs1.size(); i++) {
            if (i == currDiff) {
                highlightDiffs(diffs1.get(i)[0], diffs1.get(i)[1], diffs2.get(i)[0], diffs2.get(i)[1], diffsCurrColor);
            } else {
                highlightDiffs(diffs1.get(i)[0], diffs1.get(i)[1], diffs2.get(i)[0], diffs2.get(i)[1], diffsColor);
            }
        }
        po1TextArea.select(diffs1.get(currDiff)[0], diffs1.get(currDiff)[1]);
        po2TextArea.select(diffs2.get(currDiff)[0], diffs2.get(currDiff)[1]);

    }
    private void nextHiliteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextHiliteBTNActionPerformed
        moveHighlight(true);
    }//GEN-LAST:event_nextHiliteBTNActionPerformed

    private void prevHiliteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevHiliteBTNActionPerformed
        moveHighlight(false);
    }//GEN-LAST:event_prevHiliteBTNActionPerformed

    private void colorDifBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorDifBTNActionPerformed
        JFrame frame = new JFrame("JColorChooser");
        Color newColor = jColorChooser1.showDialog(
                frame,
                "Choose Background Color",
                colorDifBTN.getBackground());
        if (newColor != null) {
            diffsColor = newColor;
            colorDifBTN.setBackground(diffsColor);
        }
    }//GEN-LAST:event_colorDifBTNActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void colorSearchBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorSearchBTNActionPerformed
        JFrame frame = new JFrame("JColorChooser");
        Color newColor = jColorChooser1.showDialog(
                frame,
                "Choose Background Color",
                colorSearchBTN.getBackground());
        if (newColor != null) {
            searchColor = newColor;
            colorSearchBTN.setBackground(searchColor);
        }
    }//GEN-LAST:event_colorSearchBTNActionPerformed

    private void jColorChooser1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jColorChooser1MouseClicked

    }//GEN-LAST:event_jColorChooser1MouseClicked

    private void colorSearchFoundBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorSearchFoundBTNActionPerformed
        JFrame frame = new JFrame("JColorChooser");
        Color newColor = jColorChooser1.showDialog(
                frame,
                "Choose Background Color",
                colorSearchFoundBTN.getBackground());
        if (newColor != null) {
            searchFoundColor = newColor;
            colorSearchFoundBTN.setBackground(searchFoundColor);
        }
    }//GEN-LAST:event_colorSearchFoundBTNActionPerformed

    private void colorCurrDifBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorCurrDifBTNActionPerformed
        JFrame frame = new JFrame("JColorChooser");
        Color newColor = jColorChooser1.showDialog(
                frame,
                "Choose Background Color",
                colorCurrDifBTN.getBackground());
        if (newColor != null) {
            diffsCurrColor = newColor;
            colorCurrDifBTN.setBackground(diffsCurrColor);
        }
    }//GEN-LAST:event_colorCurrDifBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackFindBTN;
    private javax.swing.JDialog ColorDialog;
    private javax.swing.JButton ForFindBTN;
    private javax.swing.JTree NodesTree;
    private javax.swing.JMenuItem OpenMN;
    private javax.swing.JFrame aboutFrame;
    private javax.swing.JButton aboutOkBTN;
    private javax.swing.JPanel aboutPanel;
    private javax.swing.JScrollPane aboutScrollPane;
    private javax.swing.JButton aboutTLB;
    private javax.swing.JTextArea aboutTextArea;
    private javax.swing.JButton applyChooseRefBTN;
    private javax.swing.JButton applySettingsBTN;
    private javax.swing.JButton cancelChooseRefBTN;
    private javax.swing.JDialog chooseFromRefDialog;
    private javax.swing.JLabel chooseRefLBL;
    private javax.swing.JButton clear1BTN;
    private javax.swing.JButton clear2BTN;
    private javax.swing.JButton colorCurrDifBTN;
    private javax.swing.JButton colorDifBTN;
    private javax.swing.JButton colorSearchBTN;
    private javax.swing.JButton colorSearchFoundBTN;
    private javax.swing.JList<String> commList;
    private javax.swing.JList<String> compList1;
    private javax.swing.JList<String> compList2;
    private javax.swing.JComboBox<String> compareCombo;
    private javax.swing.JPanel comparePanel;
    private javax.swing.JSplitPane diffSplitPane;
    private javax.swing.JButton discardSettingsBTN;
    private javax.swing.JMenu editMN;
    private javax.swing.JMenuItem exitMN;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMN;
    private javax.swing.JMenu helpMN;
    private javax.swing.JLabel infoNameLBL;
    private javax.swing.JScrollPane infoPanel;
    private javax.swing.JTextArea infoTextArea;
    private javax.swing.JButton insertElem1BTN;
    private javax.swing.JButton insertElem2BTN;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane mainScrollTab3;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton nextBTN;
    private javax.swing.JButton nextHiliteBTN;
    private javax.swing.JScrollPane nodesScrollPane;
    private javax.swing.JButton openTLB;
    private javax.swing.JScrollPane po1ScrollPane;
    private javax.swing.JTextArea po1TextArea;
    private javax.swing.JScrollPane po2ScrollPane;
    private javax.swing.JTextArea po2TextArea;
    private javax.swing.JButton prevBTN;
    private javax.swing.JButton prevHiliteBTN;
    private javax.swing.JList<String> refChooseList;
    private javax.swing.JButton referenceCompBTN;
    private javax.swing.JButton referenceCompWithBTN;
    private javax.swing.JButton removeElem1BTN;
    private javax.swing.JButton removeElem2BTN;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JButton saveTLB;
    private javax.swing.JTextField searchField;
    private javax.swing.JPanel settingPanel1;
    private javax.swing.JPanel settingPanel2;
    private javax.swing.JDialog settingsDialog;
    private javax.swing.JMenuItem settingsMN;
    private javax.swing.JButton sidebarBTN;
    private javax.swing.JButton testBTN;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
}

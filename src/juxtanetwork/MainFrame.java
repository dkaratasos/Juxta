package juxtanetwork;

import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.util.Enumeration;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.ToolTipManager;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;

/**
 *
 * @author Java Project Team
 */
public class MainFrame extends javax.swing.JFrame {

    File rootInputFolder;
    File rootOutFolder = new File("Data");                              // Name of the Audits folder
    final DefaultListModel compList1Model = new DefaultListModel();     // Compare nodes
    final DefaultListModel compList2Model = new DefaultListModel();     // CompareWith Nodes
    final DefaultListModel commListModel = new DefaultListModel();      // Command list for selectiona

    DefaultMutableTreeNode nodeTreeModel = new DefaultMutableTreeNode("Nodes");     // Nodes Tree Root TreeNode
    DefaultMutableTreeNode commsTreeModel = new DefaultMutableTreeNode("Commands"); // Commands Tree Root TreeNode
    DefaultMutableTreeNode nodeTreeModelMSC = new DefaultMutableTreeNode("MSC");    // MSC subtree of nodes Tree
    DefaultMutableTreeNode nodeTreeModelHLR = new DefaultMutableTreeNode("HLR");    // HLR subtree of nodes Tree
    DefaultMutableTreeNode nodeTreeModelPool = new DefaultMutableTreeNode("Pool");  // Pool subtree of nodes Tree
    
    ImageIcon hlrIcon = new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/hlr16.gif"));
    ImageIcon mscIcon = new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/MSC16.jpg"));
    ImageIcon poolIcon = new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/pool.jpg"));

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

        initializations();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        aboutFrame = new javax.swing.JFrame();
        aboutPanel = new javax.swing.JPanel();
        infoNameLBL = new javax.swing.JLabel();
        aboutScrollPane = new javax.swing.JScrollPane();
        aboutTextArea = new javax.swing.JTextArea();
        aboutOkBTN = new javax.swing.JButton();
        settingsDialog = new javax.swing.JDialog();
        discardSettingsBTN = new javax.swing.JButton();
        applySettingsBTN = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        nextBTN = new javax.swing.JButton();
        prevBTN = new javax.swing.JButton();
        mainSplitPane = new javax.swing.JSplitPane();
        nodesScrollPane = new javax.swing.JScrollPane();
        NodesTree = new javax.swing.JTree();
        mainTabbedPane = new javax.swing.JTabbedPane();
        infoPanel = new javax.swing.JScrollPane();
        infoTextArea = new javax.swing.JTextArea();
        comparePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        compList1 = new javax.swing.JList<>();
        clear1BTN = new javax.swing.JButton();
        insertElem1BTN = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        compList2 = new javax.swing.JList<>();
        clear2BTN = new javax.swing.JButton();
        insertElem2BTN = new javax.swing.JButton();
        referenceBTN = new javax.swing.JButton();
        mainScrollTab3 = new javax.swing.JScrollPane();
        commList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        removeElem1BTN = new javax.swing.JButton();
        removeElem2BTN = new javax.swing.JButton();
        resultsPanel = new javax.swing.JPanel();
        diffSplitPane = new javax.swing.JSplitPane();
        po1ScrollPane = new javax.swing.JScrollPane();
        po1TextArea = new javax.swing.JTextArea();
        po2ScrollPane = new javax.swing.JScrollPane();
        po2TextArea = new javax.swing.JTextArea();
        toolBar = new javax.swing.JToolBar();
        openTLB = new javax.swing.JButton();
        saveTLB = new javax.swing.JButton();
        sidebarBTN = new javax.swing.JButton();
        aboutTLB = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMN = new javax.swing.JMenu();
        OpenMN = new javax.swing.JMenuItem();
        exitMN = new javax.swing.JMenuItem();
        editMN = new javax.swing.JMenu();
        settingsMN = new javax.swing.JMenuItem();
        helpMN = new javax.swing.JMenu();

        fileChooser.setDialogTitle("");
        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        aboutFrame.setTitle("About");
        aboutFrame.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/dual-mobile.png")).getImage());
        aboutFrame.setLocation(new java.awt.Point(800, 500));
        aboutFrame.setMinimumSize(new java.awt.Dimension(470, 250));
        aboutFrame.setResizable(false);

        infoNameLBL.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        infoNameLBL.setForeground(new java.awt.Color(204, 0, 51));
        infoNameLBL.setText("JuxtaNetworks");

        aboutTextArea.setBackground(java.awt.SystemColor.menu);
        aboutTextArea.setColumns(20);
        aboutTextArea.setRows(5);
        aboutTextArea.setText("JuxtaNetworks is an auditing tool for a multiple-CP system,which would \nbe used to observe and highlight configuration differences between blades \nand between members of  MSC in pool, by comparing the relative printouts.\n\nSimilar functionality is currently used in an OSS-RC tool - AXE Audit Tool");
        aboutTextArea.setEnabled(false);
        aboutTextArea.setRequestFocusEnabled(false);
        aboutScrollPane.setViewportView(aboutTextArea);

        aboutOkBTN.setText("OK");
        aboutOkBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutOkBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout aboutPanelLayout = new javax.swing.GroupLayout(aboutPanel);
        aboutPanel.setLayout(aboutPanelLayout);
        aboutPanelLayout.setHorizontalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(aboutScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aboutPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(aboutOkBTN))
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(infoNameLBL)
                .addContainerGap(125, Short.MAX_VALUE))
        );
        aboutPanelLayout.setVerticalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(infoNameLBL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aboutScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(aboutOkBTN)
                .addContainerGap())
        );

        javax.swing.GroupLayout aboutFrameLayout = new javax.swing.GroupLayout(aboutFrame.getContentPane());
        aboutFrame.getContentPane().setLayout(aboutFrameLayout);
        aboutFrameLayout.setHorizontalGroup(
            aboutFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aboutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        aboutFrameLayout.setVerticalGroup(
            aboutFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(aboutPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        settingsDialog.setTitle("Settings");
        settingsDialog.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/dual-mobile.png")).getImage());
        settingsDialog.setLocation(new java.awt.Point(800, 500));
        settingsDialog.setMinimumSize(new java.awt.Dimension(400, 300));

        discardSettingsBTN.setText("Discard");
        discardSettingsBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardSettingsBTNActionPerformed(evt);
            }
        });

        applySettingsBTN.setText("Apply");
        applySettingsBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applySettingsBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout settingsDialogLayout = new javax.swing.GroupLayout(settingsDialog.getContentPane());
        settingsDialog.getContentPane().setLayout(settingsDialogLayout);
        settingsDialogLayout.setHorizontalGroup(
            settingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsDialogLayout.createSequentialGroup()
                .addContainerGap(258, Short.MAX_VALUE)
                .addComponent(applySettingsBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(discardSettingsBTN)
                .addContainerGap())
        );
        settingsDialogLayout.setVerticalGroup(
            settingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsDialogLayout.createSequentialGroup()
                .addContainerGap(266, Short.MAX_VALUE)
                .addGroup(settingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(discardSettingsBTN)
                    .addComponent(applySettingsBTN))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JuxtaNetwork");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/dual-mobile.png")).getImage());
        setLocation(new java.awt.Point(500, 200));
        setMinimumSize(new java.awt.Dimension(600, 640));
        setPreferredSize(new java.awt.Dimension(850, 650));

        nextBTN.setText("Next");
        nextBTN.setToolTipText("Next tab");
        nextBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBTNActionPerformed(evt);
            }
        });

        prevBTN.setText("Prev");
        prevBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevBTNActionPerformed(evt);
            }
        });

        mainSplitPane.setDividerLocation(150);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        NodesTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        NodesTree.setToggleClickCount(1);
        nodesScrollPane.setViewportView(NodesTree);

        mainSplitPane.setLeftComponent(nodesScrollPane);

        mainTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainTabbedPaneStateChanged(evt);
            }
        });

        infoTextArea.setColumns(20);
        infoTextArea.setRows(5);
        infoPanel.setViewportView(infoTextArea);

        mainTabbedPane.addTab("Information", infoPanel);

        compList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(compList1);

        clear1BTN.setText("X");
        clear1BTN.setToolTipText("Clear Element from Compare");
        clear1BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear1BTNActionPerformed(evt);
            }
        });

        insertElem1BTN.setText(">");
        insertElem1BTN.setToolTipText("Insert Element to Compare");
        insertElem1BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertElem1BTNActionPerformed(evt);
            }
        });

        compList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(compList2);

        clear2BTN.setText("X");
        clear2BTN.setToolTipText("Clear Element from Compare with");
        clear2BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear2BTNActionPerformed(evt);
            }
        });

        insertElem2BTN.setText(">");
        insertElem2BTN.setToolTipText("Insert Element to Compare with");
        insertElem2BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertElem2BTNActionPerformed(evt);
            }
        });

        referenceBTN.setText("R");
        referenceBTN.setToolTipText("Load a reference to Compare with");

        commList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "PCORP", "MGNDP", "DBTSP", "MGEPP", "Comm1", "Comm2", "Comm3" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        mainScrollTab3.setViewportView(commList);

        jLabel1.setText("Compare Element");

        jLabel2.setText("With Element");

        jLabel3.setText("Compare Commands");

        removeElem1BTN.setText("<");
        removeElem1BTN.setToolTipText("Remove Element from Compare");
        removeElem1BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeElem1BTNActionPerformed(evt);
            }
        });

        removeElem2BTN.setText("<");
        removeElem2BTN.setToolTipText("Remove Element from Compare with");
        removeElem2BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeElem2BTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout comparePanelLayout = new javax.swing.GroupLayout(comparePanel);
        comparePanel.setLayout(comparePanelLayout);
        comparePanelLayout.setHorizontalGroup(
            comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(comparePanelLayout.createSequentialGroup()
                .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(comparePanelLayout.createSequentialGroup()
                                .addComponent(insertElem1BTN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeElem1BTN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(clear1BTN))
                            .addGroup(comparePanelLayout.createSequentialGroup()
                                .addComponent(insertElem2BTN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(removeElem2BTN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(referenceBTN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clear2BTN))
                            .addGroup(comparePanelLayout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(comparePanelLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 299, Short.MAX_VALUE))
                    .addComponent(mainScrollTab3))
                .addContainerGap())
        );
        comparePanelLayout.setVerticalGroup(
            comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(comparePanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(comparePanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clear1BTN)
                            .addComponent(insertElem1BTN)
                            .addComponent(removeElem1BTN))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clear2BTN)
                            .addComponent(insertElem2BTN)
                            .addComponent(referenceBTN)
                            .addComponent(removeElem2BTN)))
                    .addGroup(comparePanelLayout.createSequentialGroup()
                        .addComponent(mainScrollTab3)
                        .addContainerGap())))
        );

        mainTabbedPane.addTab("Compare", comparePanel);

        diffSplitPane.setDividerLocation(160);
        diffSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        po1TextArea.setColumns(20);
        po1TextArea.setRows(5);
        po1ScrollPane.setViewportView(po1TextArea);

        diffSplitPane.setTopComponent(po1ScrollPane);

        po2TextArea.setColumns(20);
        po2TextArea.setRows(5);
        po2ScrollPane.setViewportView(po2TextArea);

        diffSplitPane.setRightComponent(po2ScrollPane);

        javax.swing.GroupLayout resultsPanelLayout = new javax.swing.GroupLayout(resultsPanel);
        resultsPanel.setLayout(resultsPanelLayout);
        resultsPanelLayout.setHorizontalGroup(
            resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(diffSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
        );
        resultsPanelLayout.setVerticalGroup(
            resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(diffSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Results", resultsPanel);

        mainSplitPane.setRightComponent(mainTabbedPane);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 820, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(prevBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextBTN))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainSplitPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextBTN)
                    .addComponent(prevBTN)))
        );

        toolBar.setFloatable(false);
        toolBar.setRollover(true);

        openTLB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/Open16.png"))); // NOI18N
        openTLB.setToolTipText("Open");
        openTLB.setFocusable(false);
        openTLB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openTLB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openTLB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openTLBActionPerformed(evt);
            }
        });
        toolBar.add(openTLB);

        saveTLB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/Save16.png"))); // NOI18N
        saveTLB.setToolTipText("Save");
        saveTLB.setFocusable(false);
        saveTLB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveTLB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveTLB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTLBActionPerformed(evt);
            }
        });
        toolBar.add(saveTLB);

        sidebarBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/sidebar16.png"))); // NOI18N
        sidebarBTN.setToolTipText("Toggle Sidebar");
        sidebarBTN.setFocusable(false);
        sidebarBTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sidebarBTN.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        sidebarBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sidebarBTNActionPerformed(evt);
            }
        });
        toolBar.add(sidebarBTN);

        aboutTLB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/about16.png"))); // NOI18N
        aboutTLB.setToolTipText("About");
        aboutTLB.setFocusable(false);
        aboutTLB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        aboutTLB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        aboutTLB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutTLBActionPerformed(evt);
            }
        });
        toolBar.add(aboutTLB);

        fileMN.setText("File");

        OpenMN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/Open16.png"))); // NOI18N
        OpenMN.setText("Open");
        OpenMN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMNActionPerformed(evt);
            }
        });
        fileMN.add(OpenMN);

        exitMN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/exit16.png"))); // NOI18N
        exitMN.setText("exit");
        exitMN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMNActionPerformed(evt);
            }
        });
        fileMN.add(exitMN);

        menuBar.add(fileMN);

        editMN.setText("Edit");

        settingsMN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/juxtanetwork/settings16.png"))); // NOI18N
        settingsMN.setText("Settings");
        settingsMN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMNActionPerformed(evt);
            }
        });
        editMN.add(settingsMN);

        menuBar.add(editMN);

        helpMN.setText("Help");
        menuBar.add(helpMN);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Initializations method
     */
    private void initializations() {
        compList1.setModel(compList1Model);             // Set model for Compare nodes
        compList2.setModel(compList2Model);             // Set model for Compare With nodes
        //commList.setModel(commListModel);
        createNodesTree();                               // Create the Nodes Tree Model
        createCommTree();                                // Create the Commands Tree Model
        NodesTree.setRootVisible(false);                 // Do not diaplsy the Name of the root of the tree
        NodesTree.setCellRenderer(new MyRenderer());
        ToolTipManager.sharedInstance().registerComponent(NodesTree); // Tooltips on Nodes Tree enabled

        managePrevNextBTN();
    }

    /**
     * Method createNodesTree creates the nodeTree categories: MSC, HLR, Pool
     * and calls updateNodesTree to put the node leafs on the tree
     */
    private void createNodesTree() {
        nodeTreeModel.add(nodeTreeModelMSC);
        nodeTreeModel.add(nodeTreeModelHLR);
        nodeTreeModel.add(nodeTreeModelPool);
        updateNodesTree();
    }

    /**
     * Method updateNodesTree inserts a new node to the tree under the correct
     * category. If the node already exists in the tree, it is not added.
     */
    private void updateNodesTree() {
        DefaultMutableTreeNode[] nodesTreeModel = new DefaultMutableTreeNode[20];
        if (rootOutFolder.exists()) {
            int currIndex = 0;
            for (File node : rootOutFolder.listFiles()) {
                if (node.isDirectory()) {
                    nodesTreeModel[currIndex] = new DefaultMutableTreeNode(node.getName());
                    if (node.getName().startsWith("MSC") && isNotIncluded(nodeTreeModel, node.getName())) {
                        nodeTreeModelMSC.add(nodesTreeModel[currIndex]);
                    } else if (node.getName().startsWith("HLR") && isNotIncluded(nodeTreeModel, node.getName())) {
                        nodeTreeModelHLR.add(nodesTreeModel[currIndex]);
                    }
                    currIndex++;
                }
            }
        }
        NodesTree.updateUI();
    }

    /**
     * Method isNotIncluded checks if a specified treeModel name already exists
     * in the tree provided in the parameter.
     *
     * @param treeModel the Tree model to be checked
     * @param name the node checked
     * @return true if the node name is not included in the tree, i.e. will be a
     * new node on the tree
     */
    private boolean isNotIncluded(DefaultMutableTreeNode treeModel, String name) {
        boolean included = true;

        Enumeration<DefaultMutableTreeNode> e = treeModel.depthFirstEnumeration();
        while (e.hasMoreElements()) {
            DefaultMutableTreeNode nodeCheck = e.nextElement();
            if (name.equals(nodeCheck.toString())) {
                included = false;
            }
        }

        return included;
    }
    
    /**
     * Inner class MyRenderer is used to render specific icon for the different types of nodes in
     * the Nodes Tree and also specific Tooltips. The categories are MSC node, HLR node, other
     */
    class MyRenderer extends DefaultTreeCellRenderer {
    Icon nodeIcon;

    public MyRenderer(Icon icon) {
        nodeIcon = icon;
    }
    
    public MyRenderer() {
    }

    @Override
    public Component getTreeCellRendererComponent(
                        javax.swing.JTree tree,
                        Object value,
                        boolean sel,
                        boolean expanded,
                        boolean leaf,
                        int row,
                        boolean hasFocus) {

        super.getTreeCellRendererComponent(
                        tree, value, sel,
                        expanded, leaf, row,
                        hasFocus);
        if (isHLR(value)) {  // removed from if: leaf && 
            setIcon(hlrIcon);
            setToolTipText("HLR Node");
        } else if (isMSC(value)) {
            setIcon(mscIcon);
            setToolTipText("MSC Node");
        } else {
            setIcon(poolIcon);
            setToolTipText(null); //no tool tip
        } 

        return this;
    }
	
 protected boolean isHLR(Object value) {
        String nodeName = value.toString();
		
        if (nodeName.startsWith("HLR")) {
            return true;
        }

        return false;
    }
 
 protected boolean isMSC(Object value) {
        String nodeName = value.toString();
		
        if (nodeName.startsWith("MSC")) {
            return true;
        }

        return false;
    }
}	


    /**
     * Method createCommTree creates the command tree. This method inserts in
     * the tree the selected from the user commands for the comparison of the
     * nodes. The commands are grouped on two categories, based on whether the
     * command should validate to identical printout or not
     */
    private void createCommTree() {
        DefaultMutableTreeNode commsTreeModelId = new DefaultMutableTreeNode("Identical P/O");
        DefaultMutableTreeNode commsTreeModelNotId = new DefaultMutableTreeNode("Differing P/O");
        commsTreeModel.add(commsTreeModelId);
        commsTreeModel.add(commsTreeModelNotId);

        DefaultMutableTreeNode[] commandTreeModel = new DefaultMutableTreeNode[20];

        for (int i = 0; i < 10; i++) {
            commandTreeModel[i] = new DefaultMutableTreeNode("comm_" + i);
            commsTreeModelId.add(commandTreeModel[i]);
        }
        for (int i = 10; i < 20; i++) {
            commandTreeModel[i] = new DefaultMutableTreeNode("comm_" + i);
            commsTreeModelNotId.add(commandTreeModel[i]);
        }
    }

    /**
     * Method getPrintouts opens a file chooser to select the data input folder.
     * Then calls createStructure to create the Data structure and copies input
     * files
     */
    private void getPrintouts() {

        fileChooser.setDialogTitle("Open Printouts Folder");
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(1);

        fileChooser.showOpenDialog(this);
        try {
            rootInputFolder = fileChooser.getSelectedFile();
            createStructure();
        } catch (Exception e) {
            if (rootInputFolder.getName() == "") {
                System.out.println("No file selected!");
            }
        }
        updateNodesTree();
        expandTreeAll();
    }

    /**
     * Method createStructure creates in Data a timestamp folder and copies all
     * files and directories of input folder to that timestamp directory
     *
     * @throws IOException
     */
    private void createStructure() throws IOException {
        if (!rootOutFolder.exists()) {
            rootOutFolder.mkdir();
        }

        String path = rootOutFolder.getCanonicalPath();    // path in Data folder
        CopyUtil.copyDirectoryContent(new File(rootInputFolder.getCanonicalPath()), new File(path));
    }

    /**
     * Method expandTreeAll expands all the nodes of the tree
     */
    public void expandTreeAll() {
        for (int i = 0; i < NodesTree.getRowCount(); i++) {
            NodesTree.expandRow(i);
        }
    }

    /**
     * Method managePrevNextBTN will manage the Next and Prev buttons of the
     * tabs. When on last tab, NextBTN will not be enabled. When on first tab,
     * prevBTN will not be enabled. In all other cases both buttons are enabled
     */
    private void managePrevNextBTN() {
        int current = mainTabbedPane.getSelectedIndex();

        switch (current) {
            case 2:
                nextBTN.setEnabled(false);
                prevBTN.setEnabled(true);
                NodesTree.setModel(new javax.swing.tree.DefaultTreeModel(commsTreeModel));
                expandTreeAll();
                break;
            case 0:
                nextBTN.setEnabled(true);
                prevBTN.setEnabled(false);
                NodesTree.setModel(new javax.swing.tree.DefaultTreeModel(nodeTreeModel));
                expandTreeAll();
                break;
            default:
                nextBTN.setEnabled(true);
                prevBTN.setEnabled(true);
                NodesTree.setModel(new javax.swing.tree.DefaultTreeModel(nodeTreeModel));
                expandTreeAll();
                break;
        }
    }

    /**
     * Insert an element node from Nodes Tree to model of parameter if not
     * already there
     *
     * @param model
     */
    public void insertElem(DefaultListModel model) {
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) NodesTree
                .getLastSelectedPathComponent();
        String selectedNodeName = selectedNode.toString();
        if (selectedNode.isLeaf()) {
            if (!model.contains(selectedNodeName)) {
                model.addElement(selectedNodeName);
            }
        }
    }

    private void OpenMNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMNActionPerformed
        getPrintouts();
    }//GEN-LAST:event_OpenMNActionPerformed

    private void exitMNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMNActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMNActionPerformed

    private void settingsMNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsMNActionPerformed
        settingsDialog.setVisible(true);
    }//GEN-LAST:event_settingsMNActionPerformed

    private void aboutOkBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutOkBTNActionPerformed
        aboutFrame.setVisible(false);
    }//GEN-LAST:event_aboutOkBTNActionPerformed

    private void discardSettingsBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardSettingsBTNActionPerformed
        settingsDialog.setVisible(false);
    }//GEN-LAST:event_discardSettingsBTNActionPerformed

    private void applySettingsBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applySettingsBTNActionPerformed
        settingsDialog.setVisible(false);
    }//GEN-LAST:event_applySettingsBTNActionPerformed

    private void mainTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mainTabbedPaneStateChanged
        managePrevNextBTN();
    }//GEN-LAST:event_mainTabbedPaneStateChanged

    private void removeElem2BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeElem2BTNActionPerformed
        compList2Model.removeAllElements();
    }//GEN-LAST:event_removeElem2BTNActionPerformed

    private void removeElem1BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeElem1BTNActionPerformed
        compList1Model.removeAllElements();
    }//GEN-LAST:event_removeElem1BTNActionPerformed

    private void insertElem2BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertElem2BTNActionPerformed
        insertElem(compList2Model);
    }//GEN-LAST:event_insertElem2BTNActionPerformed

    private void clear2BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear2BTNActionPerformed
        compList2Model.clear();
    }//GEN-LAST:event_clear2BTNActionPerformed

    private void insertElem1BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertElem1BTNActionPerformed
        insertElem(compList1Model);
    }//GEN-LAST:event_insertElem1BTNActionPerformed

    private void clear1BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear1BTNActionPerformed
        compList1Model.clear();
    }//GEN-LAST:event_clear1BTNActionPerformed

    private void prevBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevBTNActionPerformed
        int current = mainTabbedPane.getSelectedIndex();
        if (current > 0) {
            mainTabbedPane.setSelectedIndex(current - 1);
        }
        managePrevNextBTN();
    }//GEN-LAST:event_prevBTNActionPerformed

    private void nextBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBTNActionPerformed
        int current = mainTabbedPane.getSelectedIndex();
        if (current < 2) {
            mainTabbedPane.setSelectedIndex(current + 1);
        }
        managePrevNextBTN();
    }//GEN-LAST:event_nextBTNActionPerformed

    private void aboutTLBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutTLBActionPerformed
        aboutFrame.setVisible(true);
    }//GEN-LAST:event_aboutTLBActionPerformed

    private void saveTLBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTLBActionPerformed

    }//GEN-LAST:event_saveTLBActionPerformed

    private void openTLBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openTLBActionPerformed
        getPrintouts();
    }//GEN-LAST:event_openTLBActionPerformed

    private void sidebarBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sidebarBTNActionPerformed
        if (mainSplitPane.getDividerLocation() > 1) {
            mainSplitPane.setDividerLocation(0);
            mainSplitPane.setDividerSize(3);
        } else {
            mainSplitPane.setDividerLocation(150);
            mainSplitPane.setDividerSize(5);
        }
    }//GEN-LAST:event_sidebarBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree NodesTree;
    private javax.swing.JMenuItem OpenMN;
    private javax.swing.JFrame aboutFrame;
    private javax.swing.JButton aboutOkBTN;
    private javax.swing.JPanel aboutPanel;
    private javax.swing.JScrollPane aboutScrollPane;
    private javax.swing.JButton aboutTLB;
    private javax.swing.JTextArea aboutTextArea;
    private javax.swing.JButton applySettingsBTN;
    private javax.swing.JButton clear1BTN;
    private javax.swing.JButton clear2BTN;
    private javax.swing.JList<String> commList;
    private javax.swing.JList<String> compList1;
    private javax.swing.JList<String> compList2;
    private javax.swing.JPanel comparePanel;
    private javax.swing.JSplitPane diffSplitPane;
    private javax.swing.JButton discardSettingsBTN;
    private javax.swing.JMenu editMN;
    private javax.swing.JMenuItem exitMN;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMN;
    private javax.swing.JMenu helpMN;
    private javax.swing.JLabel infoNameLBL;
    private javax.swing.JScrollPane infoPanel;
    private javax.swing.JTextArea infoTextArea;
    private javax.swing.JButton insertElem1BTN;
    private javax.swing.JButton insertElem2BTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane mainScrollTab3;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton nextBTN;
    private javax.swing.JScrollPane nodesScrollPane;
    private javax.swing.JButton openTLB;
    private javax.swing.JScrollPane po1ScrollPane;
    private javax.swing.JTextArea po1TextArea;
    private javax.swing.JScrollPane po2ScrollPane;
    private javax.swing.JTextArea po2TextArea;
    private javax.swing.JButton prevBTN;
    private javax.swing.JButton referenceBTN;
    private javax.swing.JButton removeElem1BTN;
    private javax.swing.JButton removeElem2BTN;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JButton saveTLB;
    private javax.swing.JDialog settingsDialog;
    private javax.swing.JMenuItem settingsMN;
    private javax.swing.JButton sidebarBTN;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
}
